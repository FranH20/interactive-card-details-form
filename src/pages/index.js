import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Label } from "@/components/Label/Label";
import { Input } from "@/components/Input/Input";
import { Button } from "@/components/Button/Button";
import { Form, Formik } from "formik";
import * as Yup from "yup";
import { getStyles } from "@/utils/functionUtils";
import { useState } from "react";

const inter = Inter({ subsets: ["latin"] });
const CreditCardSchema = Yup.object().shape({
  cardName: Yup.string()
    .min(5, "Too short")
    .max(20, "Too Long")
    .required("Required"),
  cardNumber: Yup.number()
    .min(1000000000000000, "Must be exactly 16 characters")
    .max(9999999999999999n, "Must be exactly 16 characters")
    .required("Required"),
  expMonth: Yup.number().min(1, "Too short").max(12).required("Required"),
  expYear: Yup.number().min(11, "Too short").max(12).required("Required"),
  cvc: Yup.number().min(100, "Too short").max(999).required("Required"),
});

const SpanError = ({ errorName }) => {
  return (
    <span>
      {errorName}
      <Image
        src="/images/icon-warning.svg"
        alt="icon warning"
        width={12}
        height={12}
      />
    </span>
  );
};

export default function Home() {
  // const [cardName, setCardName] = useState("");
  // const [cardNumber, setCardNumber] = useState(0);
  // const [expMonth, setExpMonth] = useState(0);
  // const [expYear, setExpYear] = useState(0);
  // const [cvc, setCvc] = useState(0);

  return (
    <>
      <Head>
        <title>Frontend Mentor | Interactive card details form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <aside className={styles.left}>
          <div className={styles.creditCardContainer}>
            <picture className={styles.cardFront}>
              <Image
                src="/images/bg-card-front.png"
                alt="creditcard front"
                width={0}
                height={0}
                sizes="100vw"
                style={{ width: "100%", height: "auto" }}
              />
              <div className={styles.cardFrontContent}>
                <Image
                  src="/images/card-logo.svg"
                  alt="Logo"
                  width={0}
                  height={0}
                  style={{ width: "20%", height: "auto" }}
                />
                <p>{cardNumber || "0000 0000 0000 0000"}</p>
                <span>{cardName || "Franklin Huichi"}</span>
                <span>{`${expMonth || "00"}/${expYear || "00"}`}</span>
              </div>
            </picture>
            <picture className={styles.cardBack}>
              <Image
                src="/images/bg-card-back.png"
                alt="creditcard back"
                width={0}
                height={0}
                priority={true}
                sizes="100vw"
                style={{ width: "100%", height: "auto" }}
              />
              <div className={styles.cardBackContent}>
                <p>{cvc || "000"}</p>
              </div>
            </picture>
          </div>
        </aside>
        <aside className={styles.right}>
          <Formik
            initialValues={{
              cardName: "",
              cardNumber: "",
              expMonth: "",
              expYear: "",
              cvc: "",
            }}
            validationSchema={CreditCardSchema}
            onSubmit={(values) => {
              console.log(values);
            }}
          >
            {({ values, handleChange, handleBlur, touched, errors }) => (
              <Form className={styles.cardForm}>
                <p>
                  <Label>Cardholder Name</Label>
                  <Input
                    name="cardName"
                    type="text"
                    placeholder="e.g. Franklin Huichi"
                    value={values.cardName}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    style={getStyles(errors, "cardName")}
                  />
                  {touched.cardName && errors.cardName ? (
                    <SpanError errorName={errors.cardName} />
                  ) : null}
                </p>
                <p>
                  <Label>Card Number</Label>
                  <Input
                    name="cardNumber"
                    type="number"
                    placeholder="e.g. 1234 5678 9123 0000"
                    style={getStyles(errors, "cardNumber")}
                    value={values.cardNumber}
                    onChange={handleChange}
                    onBlur={handleBlur}
                  />
                  {touched.cardNumber && errors.cardNumber ? (
                    <SpanError errorName={errors.cardNumber} />
                  ) : null}
                </p>
                <p>
                  <Label>Exp. Date (MM/YY)</Label>
                  <Input
                    name="expMonth"
                    type="number"
                    placeholder="MM"
                    value={values.expMonth}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    style={getStyles(errors, "expMonth")}
                  />
                  <Input
                    name="expYear"
                    type="number"
                    placeholder="YY"
                    value={values.expYear}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    style={getStyles(errors, "expYear")}
                  />
                </p>
                <p>
                  <Label>Cvc</Label>
                  <Input
                    name="cvc"
                    type="number"
                    placeholder="e.g. 123"
                    value={values.cvc}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    style={getStyles(errors, "cvc")}
                  />
                </p>
                <Button type="submit">Confirm</Button>
              </Form>
            )}
          </Formik>
        </aside>
        {/* Thank you! We've added your card details Continue
        <div class="attribution">
          Challenge by{" "}
          <a href="https://www.frontendmentor.io?ref=challenge" target="_blank">
            Frontend Mentor
          </a>
          . Coded by <a href="#">Your Name Here</a>.
        </div> */}
      </main>
    </>
  );
}
